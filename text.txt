Task 1
input 
const staffsDetails = [
  { name: "Jam Josh", age: 44, salary: 4000, currency: "USD" },
  { name: "Justina Kap", age: 34, salary: 3000, currency: "USD" },
  { name: "Chris Colt", age: 37, salary: 3700, currency: "USD" },
  { name: "Jane Doe", age: 24, salary: 4200, currency: "USD" }
];

output 
"I am Jam Josh a staff of Royal Suites."
"I am Justina Kap a staff of Royal Suites."
"I am Chris Colt a staff of Royal Suites."
"I am Jane Doe a staff of Royal Suites."

output 2 
"index 0 : I am Jam Josh a staff of Royal Suites."
"index 1 : I am Justina Kap a staff of Royal Suites."
"index 2 : I am Chris Colt a staff of Royal Suites."
"index 3 : I am Jane Doe a staff of Royal Suites."

calculate and print the total salaries for all staff: output "NGN 900"

print the names of people whose salaries are greater than or equal to 4000 from the array of staff details


Task 2
Square the value of every element in the array.
[1, 2, 3, 4, 5];


Task 3
Sum of every positive element
[1, -4, 12, 0, -3, 29, -150];

Task 4
const scores = [12, 55, 70, 47];
calculate and print the total: output "NGN 900"

Task 5
return an array which will include all the cities having only the first letter of each city name capitalized.
const cities = [
  "miami",
  "barcelona",
  "madrid",
  "amsterdam",
  "berlin",
  "sao paulo",
  "lisbon",
  "mexico city",
  "paris"
];

/* Expected Ouput 1: 
[
  "Miami",
  "Barcelona",
  "Madrid",
  "Amsterdam",
  "Berlin",
  "Sao paulo",
  "Lisbon",
  "Mexico city",
  "Paris"
 ];
*/

/* Expected Ouput 2: 
[
  "1. Miami",
  "2. Barcelona",
  "3. Madrid",
  "4. Amsterdam",
  "5. Berlin",
  "6. Sao paulo",
  "7. Lisbon",
  "8. Mexico city",
  "9. Paris"
 ];
 */


Task 6
 const array = [0, 1, , , , 5, 6];

Expected output 
// Visited index 0 with value 0
// Visited index 1 with value 1
// Visited index 2 with value undefined
// Visited index 3 with value undefined
// Visited index 4 with value undefined
// Visited index 5 with value 5
// Visited index 6 with value 6

 

Task 7
const array1 = [5, 12, 8, 130, 44];

return first element greater than 10 
// Expected output: 12


Task 8
const inventory = [
  { name: "apples", quantity: 2 },
  { name: "bananas", quantity: 0 },
  { name: "cherries", quantity: 5 },
];

return element with name of cherries

// Expected output: { name: 'cherries', quantity: 5 }


return true of false if Apple is in the array of fruits 
Input: ["Banana", "Orange", "Strawberry", "Blueberry"]
Task 9
Given an array of numbers, return a new array that has only the numbers that are 5 or greater.
[3, 6, 8, 2]

Task 10
Given an array of numbers, return a new array that only includes the even numbers.
[3, 6, 8, 2]

Task 11
Given an array of strings, return a new array that only includes those that are 5 characters or fewer in length
["dog", "wolf", "by", "family", "eaten", "camping"]

Task 12
Given an array of people objects, return a new array that has filtered out all those who don't belong to the club.
[
    { name: "Angelina Jolie", member: true },
    { name: "Eric Jones", member: false },
    { name: "Paris Hilton", member: true },
    { name: "Kayne West", member: false },
    { name: "Bob Ziroll", member: true }
]

Task 13
Make a filtered list of all the people who are old enough to see The Matrix (older than 18)
[
    { name: "Angelina Jolie", age: 80 },
    { name: "Eric Jones", age: 2 },
    { name: "Paris Hilton", age: 5 },
    { name: "Kayne West", age: 16 },
    { name: "Bob Ziroll", age: 100 }
]


Task 14
Get all male characters
Get all female characters
const characters = [
  {
    name: "Luke Skywalker",
    height: 172,
    mass: 77,
    eye_color: "blue",
    gender: "male",
  },
  {
    name: "Darth Vader",
    height: 202,
    mass: 136,
    eye_color: "yellow",
    gender: "male",
  },
  {
    name: "Leia Organa",
    height: 150,
    mass: 49,
    eye_color: "brown",
    gender: "female",
  },
  {
    name: "Anakin Skywalker",
    height: 188,
    mass: 84,
    eye_color: "blue",
    gender: "male",
  },
];


Task 15
function that filters valid emails based on the presence of “@”.
 Input ["alice@gmail.com", "bob@", "charlie@domain.com", "dave"]
 Output ["alice@gmail.com", "bob@", "charlie@domain.com"]
